{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be986f5f-6586-49bc-8612-d370222e3595",
   "metadata": {},
   "outputs": [],
   "source": [
    "import qiskit\n",
    "from qiskit import quantum_info\n",
    "from qiskit.execute_function import execute\n",
    "from qiskit import BasicAer\n",
    "import numpy as np\n",
    "import pickle\n",
    "import json\n",
    "import os\n",
    "import sys\n",
    "from collections import Counter\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from typing import Dict, List\n",
    "import matplotlib.pyplot as plt\n",
    "​\n",
    "if len(sys.argv) > 1:\n",
    "    data_path = sys.argv[1]\n",
    "else:\n",
    "    data_path = '.'\n",
    "​\n",
    "#define utility functions\n",
    "​\n",
    "def simulate(circuit: qiskit.QuantumCircuit) -> dict:\n",
    "    \"\"\"Simulate the circuit, give the state vector as the result.\"\"\"\n",
    "    backend = BasicAer.get_backend('statevector_simulator')\n",
    "    job = execute(circuit, backend)\n",
    "    result = job.result()\n",
    "    state_vector = result.get_statevector()\n",
    "    \n",
    "    histogram = dict()\n",
    "    for i in range(len(state_vector)):\n",
    "        population = abs(state_vector[i]) ** 2\n",
    "        if population > 1e-9:\n",
    "            histogram[i] = population\n",
    "    \n",
    "    return histogram\n",
    "​\n",
    "​\n",
    "def histogram_to_category(histogram):\n",
    "    \"\"\"This function takes a histogram representation of circuit execution results, and processes into labels as described in\n",
    "    the problem description.\"\"\"\n",
    "    assert abs(sum(histogram.values())-1)<1e-8\n",
    "    positive=0\n",
    "    for key in histogram.keys():\n",
    "        digits = bin(int(key))[2:].zfill(20)\n",
    "        if digits[-1]=='0':\n",
    "            positive+=histogram[key]\n",
    "        \n",
    "    return positive\n",
    "​\n",
    "def count_gates(circuit: qiskit.QuantumCircuit) -> Dict[int, int]:\n",
    "    \"\"\"Returns the number of gate operations with each number of qubits.\"\"\"\n",
    "    counter = Counter([len(gate[1]) for gate in circuit.data])\n",
    "    #feel free to comment out the following two lines. But make sure you don't have k-qubit gates in your circuit\n",
    "    #for k>2\n",
    "    for i in range(2,20):\n",
    "        assert counter[i]==0\n",
    "        \n",
    "    return counter\n",
    "​\n",
    "​\n",
    "def image_mse(image1,image2):\n",
    "    # Using sklearns mean squared error:\n",
    "    # https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html\n",
    "    return mean_squared_error(255*image1,255*image2)\n",
    "​\n",
    "def test():\n",
    "    #load the actual hackthon data (fashion-mnist)\n",
    "    images=np.load(data_path+'/images.npy')\n",
    "    labels=np.load(data_path+'/labels.npy')\n",
    "    \n",
    "    #test part 1\n",
    "​\n",
    "    n=len(images)\n",
    "    mse=0\n",
    "    gatecount=0\n",
    "​\n",
    "    for image in images:\n",
    "        #encode image into circuit\n",
    "        circuit,image_re=run_part1(image)\n",
    "        image_re = np.asarray(image_re)\n",
    "​\n",
    "        #count the number of 2qubit gates used\n",
    "        gatecount+=count_gates(circuit)[2]\n",
    "​\n",
    "        #calculate mse\n",
    "        mse+=image_mse(image,image_re)\n",
    "​\n",
    "    #fidelity of reconstruction\n",
    "    f=1-mse/n\n",
    "    gatecount=gatecount/n\n",
    "​\n",
    "    #score for part1\n",
    "    score_part1=f*(0.999**gatecount)\n",
    "    \n",
    "    #test part 2\n",
    "    \n",
    "    score=0\n",
    "    gatecount=0\n",
    "    n=len(images)\n",
    "​\n",
    "    for i in range(n):\n",
    "        #run part 2\n",
    "        circuit,label=run_part2(images[i])\n",
    "​\n",
    "        #count the gate used in the circuit for score calculation\n",
    "        gatecount+=count_gates(circuit)[2]\n",
    "​\n",
    "        #check label\n",
    "        if label==labels[i]:\n",
    "            score+=1\n",
    "    #score\n",
    "    score=score/n\n",
    "    gatecount=gatecount/n\n",
    "​\n",
    "    score_part2=score*(0.999**gatecount)\n",
    "    \n",
    "    print(score_part1, \",\", score_part2, \",\", data_path, sep=\"\")\n",
    "​\n",
    "​\n",
    "############################\n",
    "#      YOUR CODE HERE      #\n",
    "############################\n",
    "def encode(image):\n",
    "   for j in range(len(images[i])):\n",
    "        for k in range(len(images[i][j])):\n",
    "            images[i][j][k] *= 255 ** 2\n",
    "            images[i][j][k] = format(int(images[i][j][k]), 'b')\n",
    "Encoder: def encode(image):\n",
    "    qc = QuantumCircuit(9, 1)\n",
    "    qc.cx(0,7)\n",
    "    qc.x(0)\n",
    "    qc.cx(1,6)\n",
    "    qc.x(6)\n",
    "    qc.cx(2,5)\n",
    "    qc.x(2)\n",
    "    qc.cx(3,4)\n",
    "    qc.x(4)\n",
    "    for x in range(1, 8):\n",
    "        qc.h(x)\n",
    "    qc.barrier()\n",
    "    for j in range(len(images[i])):\n",
    "        for k in range(len(images[i][j])):\n",
    "            pixel = str(images[i][j][k])[0] + str(images[i][j][k])[2:]\n",
    "            count = 0\n",
    "            for bit in pxiel:\n",
    "                if bit == \"1\":\n",
    "                    circuit.append(cirq.rx(np.pi/8).on(cirq.LineQubit(0)))\n",
    "def decode(histogram):\n",
    "    qc.measure(q, c)\n",
    "qc.draw()\n",
    "backend = Aer.get_backend('qasm_simulator')\n",
    "job = execute(qc, backend, shots=1024)\n",
    "result = job.result()\n",
    "counts = result.get_counts(qc)\n",
    "import matplotlib.pyplot as plt\n",
    "plt.bar(counts.keys(), counts.values())\n",
    "plt.show()\n",
    "# Get the measurement data from the decoder\n",
    "\n",
    "# Create a histogram of the data\n",
    "plt.hist(counts)\n",
    "\n",
    "# Show the image\n",
    "plt.show()\n",
    "img = np.reshape(counts, (8, 8))\n",
    "plt.imshow(img, cmap='gray')\n",
    "plt.show()\n",
    "​\n",
    "def run_part1(image):\n",
    "    #encode image into a circuit\n",
    "    circuit=encode(image)\n",
    "​\n",
    "    #simulate circuit\n",
    "    histogram=simulate(circuit)\n",
    "​\n",
    "    #reconstruct the image\n",
    "    image_re=decode(histogram)\n",
    "​\n",
    "    return circuit,image_re\n",
    "​\n",
    "def run_part2(image):\n",
    "    # load the quantum classifier circuit\n",
    "    classifier=qiskit.QuantumCircuit.from_qasm_file('quantum_classifier.qasm')\n",
    "    \n",
    "    #encode image into circuit\n",
    "    circuit=encode(image)\n",
    "    \n",
    "    #append with classifier circuit\n",
    "    nq1 = circuit.width()\n",
    "    nq2 = classifier.width()\n",
    "    nq = max(nq1, nq2)\n",
    "    qc = qiskit.QuantumCircuit(nq)\n",
    "    qc.append(circuit.to_instruction(), list(range(nq1)))\n",
    "    qc.append(classifier.to_instruction(), list(range(nq2)))\n",
    "    \n",
    "    #simulate circuit\n",
    "    histogram=simulate(qc)\n",
    "        \n",
    "    #convert histogram to category\n",
    "    label=histogram_to_category(histogram)\n",
    "    \n",
    "    #thresholding the label, any way you want\n",
    "    if label>0.5:\n",
    "        label=1\n",
    "    else:\n",
    "        label=0\n",
    "        \n",
    "    return circuit,label\n",
    "​\n",
    "############################\n",
    "#      END YOUR CODE       #\n",
    "############################\n",
    "​\n",
    "test()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 [Default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
